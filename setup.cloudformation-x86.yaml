AWSTemplateFormatVersion: '2010-09-09'
Description: Salt Robo Signers on a single EC2 machine
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "EC2 Machine"
        Parameters: 
          - InstanceType
          - LatestAmiId
      - Label:
          default: "Application Configuration"
        Parameters:
          - ApiKey
          - PublicKey
    ParameterLabels: 
      InstanceType: 
        default: "Instance type"
      LatestAmiId: 
        default: "AMI to use"
      ApiKey:
        default: "API Key"
      PublicKey:
        default: "Onwer Public Key"
Parameters:
  InstanceType:
    Type: String
    Description: Free tier eligible instance
    Default: t2.micro
    AllowedPattern: ".+"
  LatestAmiId:
    Description: Amazon Linux 2023 x86 AMI for us-east1 Region
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
    AllowedPattern: ".+"
  ApiKey:
    Type: String
    Description: API Key for the application
    NoEcho: true
    AllowedPattern: ".+"
  PublicKey:
    Type: String
    Description: Owner's Public Key for recovery
    NoEcho: true
    AllowedPattern: "^[0-9a-fA-F]{130}$"
Resources:
  RoboSignerLaunchTemplate: 
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: RoboSignerLaunchTemplate
      LaunchTemplateData:
        MetadataOptions:
          HttpPutResponseHopLimit: 2 # Increase from 1 to 2 due to docker0 hop
        SecurityGroupIds: 
          - !GetAtt RoboSignerSecurityGroup.GroupId
        EnclaveOptions:
          Enabled: true
        BlockDeviceMappings:
        - DeviceName: /dev/xvda  # root device name for Amazon Linux
          Ebs:
            VolumeSize: 8       # Specified in GB
            VolumeType: gp3
            DeleteOnTermination: true
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              sudo dnf install -y git
              sudo dnf install -y python3-pip
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
              source ~/.bashrc
              nvm install 22
              nvm use 22
              npm install pm2@latest -g 
              cd /home/ec2-user
              git clone https://github.com/KagamiDigital/kagami-robo.git
              cd kagami-robo 
              git config --global --add safe.directory /kagami-robo
              git checkout cloud
              cd setup/ec2
              pip3 install --no-cache-dir -r requirements.txt
              python3 bootstrap.py "${PublicKey}"
              cd ../..
              sudo mv .env.sample .env
              sed -i 's/API_KEY="your API key goes here"/API_KEY="'"${ApiKey}"'"/' /home/ec2-user/kagami-robo/.env
              npm install
              sudo chmod +x build_robo.sh
              sudo ./build_robo.sh
              pm2 start pm2.config.js
              #sudo chmod +x boot.sh
              #sudo ./boot.sh
              #sudo reboot
  RoboSignerInstance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      LaunchTemplate: 
        LaunchTemplateId: !Ref RoboSignerLaunchTemplate
        Version: !GetAtt RoboSignerLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref RoboSignerInstanceProfile
  RoboSignerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: Security-Group
  EC2KMSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "KMSEnclavePermissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ec2KmsPermissions"
                Effect: "Allow"
                Action:
                  - 'kms:Encrypt'
                  - 'kms:CreateKey'
                  - 'kms:Decrypt'
                Resource: "*"
              - Sid: "ssmPermissions"
                Effect: "Allow"
                Action:
                  - cloudwatch:PutMetricData
                  - ds:CreateComputer
                  - ds:DescribeDirectories
                  - ec2:DescribeInstanceStatus
                  - logs:*
                  - ssm:*
                  - ec2messages:*
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
  RoboSignerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2KMSIAMRole
  
Outputs:
  RoboSignerInstanceId:
    Description: Instance Id 
    Value: !Ref RoboSignerInstance