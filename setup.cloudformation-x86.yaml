AWSTemplateFormatVersion: '2010-09-09'
Description: Salt Robo Signers on a single EC2 machine
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "EC2 Machine"
        Parameters: 
          - InstanceType
          - LatestAmiId
      - Label:
          default: "Application Configuration"
        Parameters:
          - ApiKey
          - PublicKey
    ParameterLabels: 
      InstanceType: 
        default: "Instance type"
      LatestAmiId: 
        default: "AMI to use"
      ApiKey:
        default: "API Key"
      PublicKey:
        default: "Onwer Public Key"
Parameters:
  InstanceType:
    Type: String
    Description: Free tier eligible instance
    Default: t2.micro
    AllowedPattern: ".+"
  LatestAmiId:
    Description: Amazon Linux 2023 x86 AMI for us-east1 Region
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
    AllowedPattern: ".+"
  ApiKey:
    Type: String
    Description: API Key for the application
    NoEcho: true
    AllowedPattern: ".+"
  PublicKey:
    Type: String
    Description: Owner's Public Key for recovery
    NoEcho: true
    AllowedPattern: "^[0-9a-fA-F]{130}$"
Resources:
  RoboSignerLaunchTemplate: 
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: RoboSignerLaunchTemplate
      LaunchTemplateData:
        MetadataOptions:
          HttpPutResponseHopLimit: 2 # Increase from 1 to 2 due to docker0 hop
        SecurityGroupIds: 
          - !GetAtt RoboSignerSecurityGroup.GroupId
        BlockDeviceMappings:
        - DeviceName: /dev/xvda  # root device name for Amazon Linux
          Ebs:
            VolumeSize: 8       # Specified in GB
            VolumeType: gp3
            DeleteOnTermination: true
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash

              # Update system and install basic tools
              sudo dnf update -y
              sudo dnf install -y git python3-pip

              # Install Node.js via NodeSource (simpler and works system-wide)
              curl -fsSL https://rpm.nodesource.com/setup_22.x | sudo bash -
              sudo dnf install -y nodejs

              # Install PM2 globally
              sudo npm install pm2@latest -g

              # Clone repository
              cd /home/ec2-user
              git clone https://github.com/KagamiDigital/kagami-robo.git

              # Fix git safe directory
              git config --global --add safe.directory /home/ec2-user/kagami-robo

              # checkout cloud branch
              cd kagami-robo
              git checkout cloud

              # Python setup
              sudo pip3 install --no-cache-dir -r requirements.txt
              export AWS_DEFAULT_REGION=us-east-1
              python3 bootstrap.py "${PublicKey}"

              # Environment setup
              cd /home/ec2-user/kagami-robo
              cp .env.sample .env  # Use cp instead of sudo mv
              sed -i 's/API_KEY="your API key goes here"/API_KEY="'"${ApiKey}"'"/' .env

              # Install npm dependencies
              npm install

              # Make scripts executable and run
              chmod +x build_robos.sh
              sudo ./build_robos.sh

              # Start PM2
              sudo -u ec2-user pm2 start pm2.config.js

              # Ensure PM2 starts on boot
              sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user
              sudo -u ec2-user pm2 save
  RoboSignerInstance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      LaunchTemplate: 
        LaunchTemplateId: !Ref RoboSignerLaunchTemplate
        Version: !GetAtt RoboSignerLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref RoboSignerInstanceProfile
  RoboSignerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: Security-Group
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "RoboSignersPermissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ssmPermissions"
                Effect: "Allow"
                Action:
                  - cloudwatch:PutMetricData
                  - ds:CreateComputer
                  - ds:DescribeDirectories
                  - ec2:DescribeInstanceStatus
                  - logs:*
                  - ssm:*
                  - ec2messages:*
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
  RoboSignerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2IAMRole
  
Outputs:
  RoboSignerInstanceId:
    Description: Instance Id 
    Value: !Ref RoboSignerInstance