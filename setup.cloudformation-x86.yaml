AWSTemplateFormatVersion: '2010-09-09'
Description: Enclaver on a single EC2 machine with Nitro Enclaves enabled
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "VPC Configuration"
        Parameters: 
          - VpcId
          - SubnetId
      - Label: 
          default: "EC2 Machine"
        Parameters: 
          - InstanceType
          - KeyName
          - LatestAmiId
      - Label:
          default: "Application Configuration"
        Parameters:
          - ApiKey
    ParameterLabels: 
      VpcId: 
        default: "Pick a VPC"
      SubnetId: 
        default: "Pick a subnet"
      InstanceType: 
        default: "Instance type"
      KeyName: 
        default: "SSH key"
      LatestAmiId: 
        default: "AMI to use"
      ApiKey:
        default: "API Key"
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Existing VPC to place the machine
    AllowedPattern: ".+"
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet within the VPC to place the machine
    AllowedPattern: ".+"
  InstanceType:
    Type: String
    Description: Cheapest x86 instance that supports Nitro Enclaves
    Default: c6a.xlarge
    AllowedPattern: ".+"
  KeyName:
    Description: SSH Keypair to login to the instance
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ".+"
  LatestAmiId:
    Description: Amazon Linux 2023 x86 AMI for us-east1 Region
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
    AllowedPattern: ".+"
Resources:
  RoboSignerLaunchTemplate: 
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: RoboSignerLaunchTemplate
      LaunchTemplateData:
        MetadataOptions:
          HttpPutResponseHopLimit: 2 # Increase from 1 to 2 due to docker0 hop
        KeyName: !Ref KeyName
        SecurityGroupIds: 
          - !Ref RoboSignerSecurityGroup
        EnclaveOptions:
          Enabled: true
        BlockDeviceMappings:
        - DeviceName: /dev/xvda  # root device name for Amazon Linux
          Ebs:
            VolumeSize: 16       # Specified in GB
            VolumeType: gp3
            DeleteOnTermination: true
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              sudo dnf install aws-nitro-enclaves-cli -y
              sudo dnf install aws-nitro-enclaves-cli-devel -y
              usermod -aG ne ec2-user
              usermod -aG docker ec2-user
              sudo systemctl start nitro-enclaves-allocator.service && sudo systemctl enable nitro-enclaves-allocator.service
              sudo systemctl start docker && sudo systemctl enable docker
              sed -i 's/memory_mib: 512/memory_mib: 4096/g' /etc/nitro_enclaves/allocator.yaml
              sudo curl --silent --location https://github.com/enclaver-io/enclaver/releases/download/v0.5.0/enclaver-linux-x86_64-v0.5.0.tar.gz --output enclaver.tar.gz
              sudo tar --extract --verbose --file enclaver.tar.gz
              sudo install enclaver-linux-$(uname -m)-v*/enclaver /usr/bin
              sudo dnf install -y git
              sudo dnf install -y python3-pip
              sudo dnf install -y make
              cd /home/ec2-user
              git clone https://github.com/KagamiDigital/kagami-robo.git
              cd kagami-robo
              git config --global --add safe.directory /kagami-robo
              git checkout enclave
              cd setup/ec2
              pip3 install --no-cache-dir -r requirements.txt
              export AWS_DEFAULT_REGION=us-east-1
              python3 bootstrap.py
              cd ../..
              sudo mv .env.sample .env
              sed -i 's/API_KEY="your API key goes here"/API_KEY="'"${ApiKey}"'"/' /home/ec2-user/kagami-robo/.env
              make build-docker
              make build-enclave
              make update-pcr
              reboot
              make run-enclave
  RoboSignerInstance:
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      LaunchTemplate: 
        LaunchTemplateId: !Ref RoboSignerLaunchTemplate
        Version: !GetAtt RoboSignerLaunchTemplate.LatestVersionNumber
      IamInstanceProfile: !Ref RoboSignerInstanceProfile
      SubnetId: !Ref SubnetId
  RoboSignerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Allow SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: Security-Group
  EC2KMSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: "KMSEnclavePermissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ec2KmsPermissions"
                Effect: "Allow"
                Action:
                  - 'kms:Encrypt'
                  - 'kms:CreateKey'
                Resource: "*"
              - Sid: "IAMPolicyManagement"
                Effect: "Allow"
                Action:
                  - 'iam:GetRolePolicy'
                  - 'iam:GetInstanceProfile'
                  - 'iam:PutRolePolicy'
                Resource: "*"
  RoboSignerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2KMSIAMRole
  
Outputs:
  RoboSignerInstanceId:
    Description: Instance Id 
    Value: !Ref RoboSignerInstance